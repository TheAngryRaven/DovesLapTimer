/**
 * Notes: this display of data is not pretty at all, its a debug screen.... the pretty part is your job
 * 
 * Notes: assumes you have the following:
 *  1: a legit ublox GPS (in my case a SAM-M8Q, highly reccomended)
 *  2: a 128x64 1106 i2c oled display
 *  3: your device has both a "Serial"(terminal) and a "Serial1"(GPS) interface
 *      enabling HAS_DEBUG or DOVES_LAP_TIMER_DEBUG should start spitting out information over the terminal
 * 
 * DovesLapTimer does not interface with your GPS directly,
 * you feed it data, and then check the state.
 *
 * For feeding data: Check out the "Setup()" "loop()" and "gpsLoop()"
 * For getting data: check out "displayStats()"
 *
 * I like organizing code with defines.... dont shoot me
 */

#include <DovesLapTimer.h>
DovesLapTimer lapTimer;
// force linear interpolation of crossing line (vs catmullrom)
// #define DOVES_LAP_TIMER_FORCE_LINEAR

//THIS DEFINES YOUR START/FINISH LINE
const double crossingPointALat = 00.00;
const double crossingPointALng = -00.00;
const double crossingPointBLat = 00.00;
const double crossingPointBLng = -00.00;

// sorry for putting this here......
#ifndef DISPLAY_IMAGES
  static const unsigned char PROGMEM image_data_calculating1[] = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff
  };

  static const unsigned char PROGMEM image_data_calculating2[] = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 
      0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00
  };

  static const unsigned char PROGMEM image_data_bird1[] = {
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x73, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf2, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf2, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xf4, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xf5, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xf1, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x71, 0xff, 0xff, 0xe2, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x0f, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xf3, 0x7f, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xf6, 0x1f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xe7, 0x0f, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xef, 0x81, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xef, 0xc0, 0x7e, 0x00, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x7f, 0x01, 0xff, 0xff, 0xfc, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xdf, 0xf0, 0xff, 0x87, 0xc0, 0x7f, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xd8, 0x3f, 0xff, 0xfe, 0x07, 0x7f, 0xe5, 0xfc, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xda, 0x03, 0xff, 0xf0, 0x07, 0x7f, 0xfb, 0xff, 0x1f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xda, 0x00, 0xff, 0xe4, 0x07, 0x7f, 0xe7, 0xff, 0xc7, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0xda, 0x04, 0x07, 0xe6, 0x0e, 0x7f, 0xe7, 0xff, 0xf1, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 0x1b, 0x0c, 0x23, 0xf7, 0x1c, 0xff, 0xf9, 0xff, 0xfd, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0x39, 0xf8, 0xf9, 0xf3, 0xf8, 0xff, 0xfc, 0xff, 0xfb, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf9, 0xfc, 0xf1, 0xfc, 0x78, 0xf1, 0xff, 0xfe, 0xff, 0xf3, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfb, 0xfe, 0x07, 0xfe, 0x3c, 0x03, 0xff, 0xfe, 0xff, 0xe7, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf0, 0x7f, 0x0f, 0xff, 0x9f, 0x9f, 0xff, 0xff, 0x7f, 0xcf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf0, 0x7f, 0x1f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0x7f, 0xdf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf9, 0xfe, 0x3f, 0xff, 0xe7, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf3, 0xf9, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xbc, 0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xf7, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe7, 0xf3, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf1, 0xbf, 0x3f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe7, 0xf7, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xf0, 0x7f, 0x9f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe7, 0xf7, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xfa, 0x7f, 0xcf, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xf3, 0xff, 0xef, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe9, 0xf7, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf3, 0xff, 0xe7, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe1, 0xf7, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xe5, 0xf3, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xe7, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfd, 0xf3, 0xff, 0xe0, 0xe0, 0x1d, 0xff, 0xef, 0xff, 0x0f, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfd, 0xfb, 0xff, 0xcc, 0x03, 0x0d, 0xff, 0xcf, 0xf8, 0x67, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0x9f, 0xff, 0xdd, 0xff, 0xdf, 0xff, 0xe3, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0xfd, 0xff, 0x3f, 0xff, 0xfc, 0xff, 0xbf, 0xff, 0xf8, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfe, 0x7f, 0x80, 0x39, 0xfe, 0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfe, 0x7e, 0x7c, 0xfc, 0x1f, 0x81, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0x7f, 0x18, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0x3f, 0x83, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfc, 0x3f, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff
  };

  static const unsigned char PROGMEM image_data_bird2[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x85, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x39, 0xbf, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xf9, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf9, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xfa, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xfa, 0xbf, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xf8, 0xbf, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0xff, 0xff, 0xf1, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0xff, 0xff, 0xf3, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x87, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x9f, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0xff, 0xff, 0x01, 0xff, 0xff, 0xfe, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x0f, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xfe, 0x0f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x87, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xfe, 0x0f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xdf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe0, 0x3f, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x9f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x3f, 0x80, 0xff, 0xff, 0xfe, 0x7f, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf8, 0x7f, 0xc3, 0xe0, 0x3f, 0xf8, 0x7f, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0x1f, 0xff, 0xff, 0x03, 0xbf, 0xf2, 0xfe, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x01, 0xff, 0xf8, 0x03, 0xbf, 0xfd, 0xff, 0x8f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x00, 0x7f, 0xf2, 0x03, 0xbf, 0xf3, 0xff, 0xe3, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x02, 0x03, 0xf3, 0x07, 0x3f, 0xf3, 0xff, 0xf8, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x86, 0x11, 0xfb, 0x8e, 0x7f, 0xfc, 0xff, 0xfe, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1c, 0xfc, 0x7c, 0xf9, 0xfc, 0x7f, 0xfe, 0x7f, 0xfd, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x78, 0xfe, 0x3c, 0x78, 0xff, 0xff, 0x7f, 0xf9, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0x03, 0xff, 0x1e, 0x01, 0xff, 0xff, 0x7f, 0xf3, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x87, 0xff, 0xcf, 0xcf, 0xff, 0xff, 0xbf, 0xe7, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x8f, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xbf, 0xef, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x1f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xbf, 0xdf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x7f, 0xff, 0xf9, 0xff, 0xff, 0xff, 0x9f, 0x9f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xde, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xfb, 0xdf, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xf8, 0xdf, 0x9f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xf8, 0x3f, 0xcf, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xfd, 0x3f, 0xe7, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf9, 0xff, 0xf7, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0xfb, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf3, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfb, 0xff, 0xfb, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0xf9, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfb, 0xff, 0xf3, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf9, 0xff, 0xf0, 0x70, 0x0e, 0xff, 0xf7, 0xff, 0x87, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xff, 0xe6, 0x01, 0x86, 0xff, 0xe7, 0xfc, 0x33, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0xff, 0xcf, 0xff, 0xee, 0xff, 0xef, 0xff, 0xf1, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7e, 0xff, 0x9f, 0xff, 0xfe, 0x7f, 0xdf, 0xff, 0xfc, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x7f, 0x3f, 0xc0, 0x1c, 0xff, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3e, 0x7e, 0x0f, 0xc0, 0xff, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x8c, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc1, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };
#endif

// reminder: pauses code until terminal connected
// #define DOVES_LAP_TIMER_DEBUG
// #define HAS_DEBUG
#ifdef HAS_DEBUG
  #define debugln Serial.println
  #define debug Serial.print
#else
  void dummy_debug(...) {
  }
  #define debug dummy_debug
  #define debugln dummy_debug
#endif

// GPS Includes and Parameters
#ifndef HAS_GPS
  #include <Adafruit_GPS.h>
  Adafruit_GPS* gps = NULL;

  /**
   * @brief Sends a GPS configuration command stored in program memory to the GPS module via [Serial1].
   *
   * This function reads a configuration command from PROGMEM (program memory) and sends it byte by byte to the GPS module using the [Serial1] interface.
   * The function also prints the configuration command in hexadecimal format for debugging purposes.
   *
   * @note This function contains blocking code and should be used during setup only.
   *
   * @param Progmem_ptr Pointer to the PROGMEM (program memory) containing the GPS configuration command.
   * @param arraysize Size of the configuration command stored in PROGMEM.
   */
  void GPS_SendConfig(const uint8_t *Progmem_ptr, uint8_t arraysize) {
    uint8_t byteread, index;

    debug(F("GPSSend  "));

    for (index = 0; index < arraysize; index++)
    {
      byteread = pgm_read_byte_near(Progmem_ptr++);
      if (byteread < 0x10)
      {
        debug(F("0"));
      }
      debug(byteread, HEX);
      debug(F(" "));
    }

    debugln();
    //set Progmem_ptr back to start
    Progmem_ptr = Progmem_ptr - arraysize;

    for (index = 0; index < arraysize; index++)
    {
      byteread = pgm_read_byte_near(Progmem_ptr++);
      Serial1.write(byteread);
    }
    delay(200);
  }

  // ublox commands
  // 16
  const PROGMEM  uint8_t GPGLLOff[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
  const PROGMEM  uint8_t GPVTGOff[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
  const PROGMEM  uint8_t GPGSVOff[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
  const PROGMEM  uint8_t GPGSAOff[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
  //  every 5 or 10 packets, if not sent defaults to every packet
  const PROGMEM  uint8_t GPGGAOn5[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3C};
  const PROGMEM  uint8_t GPGGAOn10[]= {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x09, 0x55};

  const PROGMEM  uint8_t BalancedPower[] = {0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x61};
  const PROGMEM  uint8_t FullPower[] = {0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5A};
  // 14
  // default 1hz on sam-m8q
  const PROGMEM  uint8_t Navrate5hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
  const PROGMEM  uint8_t Navrate10hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12};
  // ONLY works with ENABLE_GPS_ONLY
  const PROGMEM  uint8_t Navrate18hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x38, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4E, 0x0A};
  //only send after enabling gps-only reception
  const PROGMEM  uint8_t ENABLE_SBAS[] = {0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x01, 0x03, 0x03, 0x00, 0x89, 0xA3, 0x07, 0x00};
  // 44
  const PROGMEM  uint8_t NavTypeAutomobile[] = {
    0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27,
    0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xC4
  };
  // 28
  const PROGMEM  uint8_t NMEAVersion23[] = {
    0xB5, 0x62, 0x06, 0x17, 0x14, 0x00, 0x00, 0x23, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x1D
  };
  const PROGMEM  uint8_t uart115200[] = {
    0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2,
    0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E
  };
  const PROGMEM  uint8_t uart115200NmeaOnly[] = {
    0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2,
    0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x78
  };
  const PROGMEM  uint8_t uart19200[]  = {
    0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0x4B,
    0x00, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x57
  };
  const PROGMEM  uint8_t uart19200nmeaOnly[] = {
    0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0x4B,
    0x00, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x51
  };
  // 68
  const PROGMEM  uint8_t ENABLE_GPS_SBAS_GAL[] =  {
    0xB5, 0x62, 0x06, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x2E, 0x9D
  };
  const PROGMEM  uint8_t ENABLE_GPS_ONLY[] =      {
    0xB5, 0x62, 0x06, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x2C, 0x4D
  };
  const PROGMEM  uint8_t ENABLE_GPS_GLONASS[] =   {
    0xB5, 0x62, 0x06, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x05, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x2F, 0x89
  };
#endif

// Display includes and parameters
#ifndef HAS_DISPLAY
  #include <Adafruit_GFX.h>
  #include <Adafruit_SH110X.h>

  #define i2c_Address 0x3c //hmm not actually what the board says
  // #define i2c_Address 0x78

  #define SCREEN_WIDTH 128
  #define SCREEN_HEIGHT 64
  #define OLED_RESET -1
  Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

  int displayUpdateRateHz = 5;
  unsigned long displayLastUpdate;
#endif

int ledState = LOW;
unsigned long currentMillis;
void setup() {
  #if defined(HAS_DEBUG) || defined(DOVES_LAP_TIMER_DEBUG)
      Serial.begin(9600);
      while (!Serial);
  #endif

  // Initialize oled displau
  displaySetup();
  // display borbo
  displayLoadPage();
  // initialize GPS and send configuration commands
  gpsSetup();

  // enabled built-in seeed NRF52840 led
  pinMode(LED_GREEN, OUTPUT); // NMEA communication
  digitalWrite(LED_GREEN, ledState); // old nmea notify

  // initialize laptimer class
  lapTimer.setStartFinishLine(crossingPointALat, crossingPointALng, crossingPointBLat, crossingPointBLng);
  // reset everything back to zero
  lapTimer.reset();

  debugln(F("GPS Lap Timer Started"));
}

void loop() {
  currentMillis = millis();
  gpsLoop();
  displayLoop();
}

/**
 * @brief Returns the GPS time since midnight in milliseconds
 *
 * @return unsigned long The time since midnight in milliseconds
 */
unsigned long getGpsTimeInMilliseconds() {
  return millis(); // hotfix, gps time doing a weird

  unsigned long timeInMillis = 0;
  timeInMillis += gps->hour * 3600000ULL;   // Convert hours to milliseconds
  timeInMillis += gps->minute * 60000ULL;   // Convert minutes to milliseconds
  timeInMillis += gps->seconds * 1000ULL;   // Convert seconds to milliseconds
  timeInMillis += gps->milliseconds;        // Add the milliseconds part

  return timeInMillis;
}

// gps setup and loop functions
#ifndef HAS_GPS
  void gpsLoop() {
      char c = gps->read();
      if (gps->newNMEAreceived() && gps->parse(gps->lastNMEA())) {
          // Toggle green LED every time valid NMEA is received
          ledState = ledState == LOW ? HIGH : LOW;
          digitalWrite(LED_GREEN, ledState);

          // always update current speed, speed is accurate with as little as 2 sats
          lapTimer.updateCurrentSpeedKmh(gps->speed * 1.852);
          // always keep the time up to date, gps can keep time somewhat well once synced, or via battery backup
          lapTimer.updateCurrentTime(getGpsTimeInMilliseconds());

          if (gps->fixquality > 0) {
            float altitude = 50; // gps->altitude // flat earth for testing
            // must update odometer every refresh (ONLY WHEN FIX VALID)
            lapTimer.updateOdometer(gps->latitudeDegrees, gps->longitudeDegrees, gps->altitude);
            // check if we are crossing start/finish line (ONLY WHEN FIX VALID)
            lapTimer.checkStartFinish(gps->latitudeDegrees, gps->longitudeDegrees);
          }
      }
  }

  void gpsSetup() {
    // first try serial at 9600 baud
    Serial1.begin(9600);
    // wait for the GPS to boot
    delay(2250);
    if (Serial1) {
      GPS_SendConfig(uart115200NmeaOnly, 28);
      Serial1.end();
    }

    // reconnect at proper baud
    gps = new Adafruit_GPS(&Serial1);
    Serial1.begin(115200);
    // wait for the GPS to boot
    delay(2250);
    // Send GPS Configurations
    if (Serial1) {
      GPS_SendConfig(NMEAVersion23, 28);
      GPS_SendConfig(FullPower, 16);

      GPS_SendConfig(GPGLLOff, 16);
      GPS_SendConfig(GPVTGOff, 16);
      GPS_SendConfig(GPGSVOff, 16);
      GPS_SendConfig(GPGSAOff, 16);
      GPS_SendConfig(GPGGAOn5, 16); // for 10hz
      // GPS_SendConfig(GPGGAOn10, 16); // for 18hz
      GPS_SendConfig(NavTypeAutomobile, 44);
      GPS_SendConfig(ENABLE_GPS_ONLY, 68);
      GPS_SendConfig(Navrate10hz, 14);
      // GPS_SendConfig(Navrate18hz, 14);
    } else {
      debugln("No GPS????");
    }
  }
#endif

// setup / loop / pages
#ifndef HAS_DISPLAY
  void displaySetup() {
    debugln("SETTING UP DISPLAY");
    delay(250); // wait for the OLED to power up
    display.begin(i2c_Address, true); // Address 0x3C default
    display.setTextColor(SH110X_WHITE);
    display.setTextWrap(false);
    display.setFont();
    display.clearDisplay();
    display.display();
    displayLastUpdate = millis();
  }

  void displayLoop() {
    // Update Display
    if (currentMillis - displayLastUpdate > (1000 / displayUpdateRateHz)) {
      displayLastUpdate = millis();

      if (!lapTimer.getCrossing()) {
        displayStats();
      } else {
        displayCrossing();
      }
    }
  }

  bool calculatingFlip = false;
  void displayCrossing() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);

    // Draw bitmap on the screen
    calculatingFlip = calculatingFlip == true ? false : true;
    if (calculatingFlip) {
      display.drawBitmap(0, 0, image_data_calculating1, 128, 64, 1);
    } else {
      display.drawBitmap(0, 0, image_data_calculating2, 128, 64, 1);
    }

    display.display();
  }

  void displayLoadPage() {
    display.clearDisplay();
    display.drawBitmap(0, 0, image_data_bird2, 128, 64, 1);
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println("");
    display.setTextSize(2);
    display.setTextColor(SH110X_BLACK);
    display.println("Loading");
    display.setTextColor(SH110X_WHITE);
    display.display();
  }

  bool bingBong = false;
  unsigned long lastCurTime = -1;
  unsigned long worstTimeDifference = 0;
  void displayStats() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);

    display.print("Q:");
    display.print(gps->fixquality);

    display.print(" H:");
    display.print(gps->HDOP, 2);

    // this little derp here just lets me know the device is still working when the GPS hangs for a moment
    display.print(" [");
    bingBong = bingBong == true ? false : true;
    display.print(bingBong == true ? "*" : " ");
    display.print("|");
    display.print(ledState == LOW ? "*" : " ");
    display.print("] ");

    // just a little debuggin
    unsigned long currentTime = getGpsTimeInMilliseconds();
    unsigned long tDiff = -1;
    if (lastCurTime > 0) {
      tDiff = currentTime - lastCurTime;
      if (tDiff > worstTimeDifference || tDiff < 0) {
        worstTimeDifference = tDiff;
      }
      display.print(worstTimeDifference);
    } else {
      display.print("0");  
    }
    lastCurTime = currentTime;

    display.println();

    display.print("St:");
    display.print(gps->satellites);
    display.print(" rs:");
    display.print(lapTimer.getRaceStarted() == true ? "T" : "F");
    display.print(" cr:");
    display.print(lapTimer.getCrossing() == true ? "T" : "F");
    display.print(" la:");
    display.print(lapTimer.getLaps());
    display.println();

    display.print("CLT: ");
    display.print(lapTimer.getCurrentLapTime() / 1000);
    display.print(".");
    display.print(lapTimer.getCurrentLapTime() % 1000);
    // display.print(", ");
    // display.print(lapTimer.lapTimer.getCurrentLapTime());
    display.print(" TL:");
    bool idnl = lapTimer.isAcuteTriangle(
      gps->latitudeDegrees, gps->longitudeDegrees,
      crossingPointALat,
      crossingPointALng,
      crossingPointBLat,
      crossingPointBLng
    );
    display.print(idnl == true ? "T" : "F");
    display.print(":");
    double dtl = lapTimer.pointLineSegmentDistance(
      gps->latitudeDegrees, gps->longitudeDegrees,
      crossingPointALat,
      crossingPointALng,
      crossingPointBLat,
      crossingPointBLng
    );
    display.print(dtl);
    display.println();

    display.print("B:");
    display.print(lapTimer.getBestLapNumber());
    display.print("-");
    display.print(lapTimer.getBestLapTime() / 1000);
    display.print(".");
    display.print(lapTimer.getBestLapTime() % 1000);
    display.print(" L: ");
    display.print(lapTimer.getLastLapTime() / 1000);
    display.print(".");
    display.print(lapTimer.getLastLapTime() % 1000);

    // display.print("lapStart: ");
    // display.println(lapTimer.getCurrentLapStartTime());
    // display.print("CurTime: ");
    // display.println(getGpsTimeInMilliseconds());

    display.println();
    display.print("pace: ");
    display.print(lapTimer.paceDifference());
    display.print(" crD:");
    display.print(lapTimer.getCurrentLapDistance());

    display.println();
    display.print("AtM:");
    display.print(gps->altitude);
    display.print(" odo:");
    display.print(lapTimer.getTotalDistanceTraveled());

    display.println();   
    // display.print("BLD:");
    // display.print(lapTimer.getBestLapDistance());
    // display.print(" LLD:");
    // display.print(lapTimer.getLastLapDistance());
    display.print("BLP:");
    display.print(lapTimer.getBestLapTime() / lapTimer.getBestLapDistance());
    display.print(" CLP:");
    display.print(lapTimer.getCurrentLapTime() / lapTimer.getCurrentLapDistance());

    display.println();
    display.print("Time:");
    display.print(tDiff);
    display.print(":");
    display.println(getGpsTimeInMilliseconds());

    display.display();
  }
#endif